name: Comment the manifest files to the PullRequest
run-name: ${{ github.workflow }} - ${{ github.event.pull_request.title }}

on:
  pull_request:
    branches:
      - main
    paths:
      - "charts/**"
      - "env/**"

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

permissions:
  contents: read

jobs:
  comment-manifests:
    name: Comment k8s manifest files
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          ref: ${{ github.head_ref }}

      - name: Setup helm
        uses: azure/setup-helm@v4

      - name: Show manifest files cluster-creation
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');
            const path = require('path');
            const { execSync } = require('child_process');

            const baseDir = './env';
            const chartDir = './charts/cluster-creation';
            const directories = fs.readdirSync(baseDir, { withFileTypes: true })
              .filter(dirent => dirent.isDirectory())
              .map(dirent => dirent.name);

            directories.forEach(dir => {
              console.log(`Processing directory: ${dir}`);
              
              // Helm template コマンドを実行
              const defaultValuesFile = path.join(chartDir, 'values.yml');
              const valuesFile = path.join(baseDir, dir, 'values.yml');
              try {
                const cmdHelmTemplate = `helm template ${chartDir} -f ${defaultValuesFile} -f ${valuesFile}`;
                const output = execSync(cmdHelmTemplate, { encoding: 'utf-8' });
                console.log(`Helm template output for ${dir}:\n${output}`);

                const body = `<details><summary>Show cluster-creation manifests in ${dir}</summary>

              \`\`\`yaml
              ${output}
              \`\`\`
              </details>`

                github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: body
                })
              } catch (error) {
                console.error(`Error running helm template for ${dir}:\n${error.message}`);
                throw error;
              }
            });

      - name: Show manifest files apps
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');
            const path = require('path');
            const { execSync } = require('child_process');

            const baseDir = './env';
            const chartDir = './charts/apps';
            const directories = fs.readdirSync(baseDir, { withFileTypes: true })
              .filter(dirent => dirent.isDirectory())
              .map(dirent => dirent.name);

            directories.forEach(dir => {
              console.log(`Processing directory: ${dir}`);
              
              // Helm template コマンドを実行
              const defaultValuesFile = path.join(chartDir, 'values.yml');
              const valuesFile = path.join(baseDir, dir, 'values.yml');
              try {
                const cmdHelmTemplate = `helm template ${chartDir} -f ${defaultValuesFile} -f ${valuesFile}`;
                const output = execSync(cmdHelmTemplate, { encoding: 'utf-8' });
                console.log(`Helm template output for ${dir}:\n${output}`);

                const body = `<details><summary>Show apps manifests in ${dir}</summary>

              \`\`\`yaml
              ${output}
              \`\`\`
              </details>`

                github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: body
                })
              } catch (error) {
                console.error(`Error running helm template for ${dir}:\n${error.message}`);
                throw error;
              }
            });
